=head1 Posemo Developer Manual: Check Modules

This manual is about writing check modules for Posemo.


=head2 Overview

Writing check modules is simple and easy. Often you only have to wrinte some
SQL, define the return type and the Posemo sugar makes everything else for you.
Since Posemo is written in fully OO-Perl with L<Moose|Moose>, you usually has
full access to all Moose features.

Each check module is a subclass of L<PostgreSQL::SecureMonitoring::Checks|PostgreSQL::SecureMonitoring::Checks>
and you can override each method or add something with all Moose method modifiers. e.g. when
you want to change the ebhaviour of the C<ececute> method.

Each check module should return generic values, independently from the frontend.

=head2 Examples

You can use all the check modules in C<lib/PostgreSQL/SecureMonitoring/Checks> as examples.


=head3 Simple Example

A minimalistic check module looks like this:

 package PostgreSQL::SecureMonitoring::Checks::SimpleAlive; # by Default, the name of the check is build from this package name

 use PostgreSQL::SecureMonitoring::ChecksHelper;            # enables Moose, exports sugar functions; enables strict&warnings
 extends "PostgreSQL::SecureMonitoring::Checks";            # We extend our base class ::Checks

 check_has code => "SELECT true";                           # This is our check SQL!

 1;                                                         # every Perl module must return (end with) a true value


So, in the first line there is the name of the Perl package. This B<must>
be the same as the file and path name, but with C<::> instead of C</> and
without the file extension.

In line 3, the module uses the Posemo Checks helper module. This enables
everything from L<Moose|Moose>, like you type C<use Moose;>, and one additional
sugar function with the name C<check_has>. With this you can set every attribute
of the base class C<PostgreSQL::SecureMonitoring::Checks>. See below for a list
of all attributes.

In line 4, C<PostgreSQL::SecureMonitoring::Checks> is defined via Moose as base
class, our module inherits everything from that. See the L<Moose::Manual|Moose Manual>
for more documentation about moose.

In line 6, all check parameters are defined. The only parameter (which must be
set by every check module) is the code. If you have a very special case, you might
want to override the C<_build_code> method instead.



=head2 Return values

=head3 Recommended return values

Your check can theoretical return every value(s) you can imagine. It's possible to
return complex things with a JSON data structure or something else. B<Don't do this!>

B<Your return values should be generic and usable by every frontend.> You should not
return a result like C<critical> by your check SQL itself, because it usually don't
know the thresholds etc. Instead, use the buildin C<test_critical_warning> method
or write your own and override it. If you want to return a list of texts
(e.g. "unused indexes") beside a counter, you should override the C<execude> method,
change the result and set the message inside the result in C<test_critical_warning>.




=cut
