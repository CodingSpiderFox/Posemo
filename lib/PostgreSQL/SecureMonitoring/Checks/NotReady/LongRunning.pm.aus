package PostgreSQL::SecureMonitoring::Checks::LongRunning;

=head1 NAME

 PostgreSQL::SecureMonitoring::Checks::LongRunning -- statistics about long running queries/transactions

=head1 SYNOPSIS

   # you may set some parameters in the config file
   <Check Activity>
     skip_db_re     = "(^template[01]|_backup)$"      # Change the default value for ignored databases 
     # .....
   </Check>


=head1 DESCRIPTION


TODO!

This check returns ...


=head2 SQL/Result

The SQL generates a result like this:

 ....

For each existing database all connections are counted grouped by type, and a summary of all databases is given too.

=head3 Filter by database name

Results may be filtered with parameter C<skip_db_re>, which is a regular expression filtering the databases. 
Default Filter is C<^template[01]$>, which excludes <template0> and <template1> databases.


=cut

use PostgreSQL::SecureMonitoring::ChecksHelper;
extends "PostgreSQL::SecureMonitoring::Checks";

has skip_db_re => ( is => "ro", isa => "Str", );


check_has
   description          => 'Long running queries or transactions',
   has_multiline_result => 1,
   result_type          => "integer",
   arguments            => [ [ skip_db_re => 'TEXT', '^template[01]$' ], ],
   graph_type           => "stacked_area",
   graph_colors         => [qw(blue pastel_green red purple light_yellow yellow)],

   # complex return type
   return_type => q{
   ........   
   },

   code => q{
      -- TODO!
      WITH states AS 
         (
            SELECT db.datname::VARCHAR(64)                                                         AS database, 
                   COUNT(CASE WHEN state = 'active'                        THEN true END)::INTEGER AS active,
                   COUNT(CASE WHEN state = 'idle'                          THEN true END)::INTEGER AS idle,
                   COUNT(CASE WHEN state = 'idle in transaction'           THEN true END)::INTEGER AS "idle in transaction",
                   COUNT(CASE WHEN state = 'idle in transaction (aborted)' THEN true END)::INTEGER AS "idle in transaction (aborted)",
                   COUNT(CASE WHEN state = 'fastpath function call'        THEN true END)::INTEGER AS "fastpath function call",
                   COUNT(CASE WHEN state = 'disabled'                      THEN true END)::INTEGER AS disabled
              FROM pg_stat_activity AS stat
        RIGHT JOIN pg_database AS db ON stat.datname = db.datname 
          WHERE ( CASE WHEN length(skip_db_re) > 0 THEN db.datname !~ skip_db_re ELSE true END )
          GROUP BY database
          ORDER BY database
         )
       SELECT '!TOTAL', 
               sum(active)::INTEGER, 
               sum(idle)::INTEGER, 
               sum("idle in transaction")::INTEGER, 
               sum("idle in transaction (aborted)")::INTEGER, 
               sum("fastpath function call")::INTEGER, 
               sum(disabled)::INTEGER 
         FROM states
       UNION ALL
       SELECT database,
              active, 
              idle, 
              "idle in transaction", 
              "idle in transaction (aborted)", 
              "fastpath function call", 
              disabled 
         FROM states;
      };


1;
